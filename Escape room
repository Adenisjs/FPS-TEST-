import random
import time
import curses

# Define the 5x5 grid for the rooms (default layout)
grid = [
    ['Start', 'Room 1', 'Locked Room', 'Room 2', 'Room 3'],
    ['Room 4', 'Room 5', 'Key Room', 'Room 6', 'Room 7'],
    ['Room 8', 'Room 9', 'Obstacle Room', 'Room 10', 'Room 11'],
    ['Room 12', 'Room 13', 'Room 14', 'Room 15', 'Room 16'],
    ['Room 17', 'Room 18', 'Exit', 'Room 19', 'Room 20']
]

# Default map settings (easy difficulty)
locked_doors = {(0, 2): 'Key 1'}
special_rooms = {(1, 2): 'Key Room', (2, 2): 'Obstacle Room'}
max_inventory_slots = 3

# Function to set difficulty based on user input
def set_difficulty():
    global locked_doors, special_rooms, max_inventory_slots

    difficulty = input("Choose difficulty (easy/medium/hard): ").lower()

    if difficulty == 'medium':
        # Adjustments for medium difficulty
        locked_doors = {(0, 2): 'Key 1', (4, 0): 'Key 2'}  # Additional locked door
        special_rooms = {(1, 2): 'Key Room', (2, 2): 'Obstacle Room', (4, 1): 'Obstacle Room'}  # Additional obstacle room
        max_inventory_slots = 2  # Reduced inventory space
    elif difficulty == 'hard':
        # Adjustments for hard difficulty
        locked_doors = {(0, 2): 'Key 1', (4, 0): 'Key 2', (2, 0): 'Key 3'}  # More locked doors
        special_rooms = {(1, 2): 'Key Room', (2, 2): 'Obstacle Room', (4, 1): 'Obstacle Room', (0, 4): 'Key Room'}  # More obstacles and keys
        max_inventory_slots = 1  # Very limited inventory space

# Function to display the current room and available directions
def display_room(current_position):
    room = grid[current_position[0]][current_position[1]]
    print(f'You are in {room}')
    print("Available directions: ", end="")
    if current_position[0] > 0:
        print("Up ", end="")
    if current_position[0] < 4:
        print("Down ", end="")
    if current_position[1] > 0:
        print("Left ", end="")
    if current_position[1] < 4:
        print("Right ", end="")
    print()

# Main game loop
def play_escape_room(stdscr):
    set_difficulty()
    current_position = (0, 0)
    keys_collected = []
    inventory = []
    start_time = time.time()

    while True:
        display_room(current_position)

        # Check for 'Tab' key press to display inventory
        key = stdscr.getch()
        if key == 9:  # ASCII code for 'Tab' key
            print("Inventory:", inventory)

        # Ask for player input
        direction = input("Enter direction (up/down/left/right): ").lower()

        # Update position based on input
        if direction == 'up' and current_position[0] > 0:
            current_position = (current_position[0] - 1, current_position[1])
        elif direction == 'down' and current_position[0] < 4:
            current_position = (current_position[0] + 1, current_position[1])
        elif direction == 'left' and current_position[1] > 0:
            current_position = (current_position[0], current_position[1] - 1)
        elif direction == 'right' and current_position[1] < 4:
            current_position = (current_position[0], current_position[1] + 1)
        else:
            print("Invalid direction. Try again.")
            continue

        # Check if the player has reached the exit
        if grid[current_position[0]][current_position[1]] == 'Exit':
            end_time = time.time()
            print(f"Congratulations! You have escaped in {int(end_time - start_time)} seconds!")
            break

        # Check for locked doors and keys
        if current_position in locked_doors.keys():
            required_key = locked_doors[current_position]
            if required_key in keys_collected:
                print(f"You've unlocked the door using {required_key}!")
            else:
                print(f"The door is locked. You need {required_key} to unlock it.")
                continue

        # Check for special rooms (Key Room and Obstacle Room)
        if current_position in special_rooms.keys():
            room_type = special_rooms[current_position]
            if room_type == 'Key Room':
                print("You found a key!")
                keys_collected.append('Key')
            elif room_type == 'Obstacle Room':
                obstacle_chance = random.random()
                if obstacle_chance < 0.5:
                    print("Oops! You encountered an obstacle and need to go back to the start.")
                    current_position = (0, 0)
                else:
                    print("You safely passed through the obstacle room!")

        # Check for inventory management
        if grid[current_position[0]][current_position[1]] != 'Start' and grid[current_position[0]][current_position[1]] != 'Exit':
            if len(inventory) < max_inventory_slots:
                print("You found an item and added it to your inventory!")
                inventory.append(grid[current_position[0]][current_position[1]])
            else:
                print("You found an item but your inventory is full. Can't pick it up.")

        # Display keys collected
        if keys_collected:
            print("Keys collected:", keys_collected)

# Start the game with curses wrapper
curses.wrapper(play_escape_room)
